## ✅ Problem: Maximum Manhattan Distance After K Changes

You are given a string `s` consisting of the characters `'N'`, `'S'`, `'E'`, and `'W'`, where `s[i]` represents a movement in an infinite 2D grid:

- `'N'`: Move north by 1 unit (i.e., `y += 1`)
- `'S'`: Move south by 1 unit (i.e., `y -= 1`)
- `'E'`: Move east by 1 unit (i.e., `x += 1`)
- `'W'`: Move west by 1 unit (i.e., `x -= 1`)

Initially, you are at the origin `(0, 0)`. You are allowed to **change at most `k` characters** in the string to any of the four directions (`'N'`, `'S'`, `'E'`, `'W'`).

Your task is to **find the maximum Manhattan distance** from the origin that can be achieved **at any time** while performing the movements in order.

The **Manhattan distance** between a point `(x, y)` and the origin `(0, 0)` is defined as `|x| + |y|`.

---

### 🔹 Example 1:

**Input:**

```python
s = "NWSE"
k = 1
```

**Output:**

```
3
```

**Explanation:**

Change `s[2]` from `'S'` to `'N'`, so the new string becomes `"NWNE"`.

Step-by-step:

| Move | Position `(x, y)` | Manhattan Distance |
| ---- | ----------------- | ------------------ |
| N    | (0, 1)            | 1                  |
| W    | (-1, 1)           | 2                  |
| N    | (-1, 2)           | 3 ✅               |
| E    | (0, 2)            | 2                  |

Maximum Manhattan distance during traversal: **3**

---

### 🔹 Example 2:

**Input:**

```python
s = "NSWWEW"
k = 3
```

**Output:**

```
6
```

**Explanation:**

Change `s[1]` from `'S'` to `'N'`, and `s[4]` from `'E'` to `'W'`. New string: `"NNWWWW"`.

Final position: `(-4, 2)` → Manhattan distance = `|−4| + |2| = 6`

---

### 🔒 Constraints:

- `1 <= s.length <= 10⁵`
- `0 <= k <= s.length`
- `s[i]` ∈ {'N', 'S', 'E', 'W'}

### 💡 My Approach

1. **Enumerate the string step-by-step** and keep track of the count of each direction — namely, the number of `'N'`, `'S'`, `'E'`, and `'W'` encountered so far.

2. At each step, compute the number of **conflicting direction pairs**:

   - `'N'` vs `'S'` (they cancel each other in the vertical direction)
   - `'E'` vs `'W'` (they cancel each other in the horizontal direction)
   - The total number of conflicts is `min(N, S) + min(E, W)`

3. Now, consider two cases:

   - **If the number of allowed changes (`k`) is greater than or equal to the number of conflicts**, then:

     - We can eliminate all the opposing moves, and potentially align all moves in the same direction.
     - Therefore, the maximum possible Manhattan distance at this point is simply the number of steps taken so far: `index + 1`.

   - **If the number of conflicts exceeds the allowed changes**, then:

     - We can only resolve part of the cancellation.
     - The base effective distance is reduced by `2 * conflicts`, since each conflict involves two canceling moves.
     - However, we can still improve the distance by changing up to `k` moves to more favorable directions — each change potentially adds up to 2 to the Manhattan distance.
     - So, the maximum distance becomes: `(index + 1) - 2 * conflicts + 2 * k`.

4. At each step, track the maximum such distance observed.

---

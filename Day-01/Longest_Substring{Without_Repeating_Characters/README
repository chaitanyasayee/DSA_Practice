Here’s a properly refined and well-structured version of the README for clarity, professionalism, and completeness.

---

# 📌 Longest Substring Without Repeating Characters

## 📝 Problem Statement  

Given a string `s`, find the length of the longest contiguous substring that contains only unique characters (i.e., no repeating characters).

## 📍 Examples  

### ✅ Example 1  
**Input:**  
```plaintext
s = "abcabcbb"
```
**Output:**  
```plaintext
3
```
**Explanation:**  
The longest substring without repeating characters is `"abc"`, with a length of `3`.

---

### ✅ Example 2  
**Input:**  
```plaintext
s = "bbbbb"
```
**Output:**  
```plaintext
1
```
**Explanation:**  
The longest substring without repeating characters is `"b"`, with a length of `1`.

---

### ✅ Example 3  
**Input:**  
```plaintext
s = "pwwkew"
```
**Output:**  
```plaintext
3
```
**Explanation:**  
The longest substring without repeating characters is `"wke"`, with a length of `3`.  
**Note:** `"pwke"` is not a valid answer because substrings must be contiguous.

---

## 📌 Constraints  

- `0 <= s.length <= 50,000`
- `s` consists of English letters, digits, symbols, and spaces.

---

## 💡 Approach: Sliding Window Technique  

### 🚀 Idea  
To efficiently find the longest substring without repeating characters, we use a **Sliding Window** approach. The window expands by adding characters to the right while ensuring uniqueness. If a duplicate character is found, we shift the left pointer forward to maintain a valid window.

### ⏳ Complexity Analysis  
- **Time Complexity:** `O(n)`, where `n` is the length of `s`. Each character is processed at most twice (once when added, once when removed).  
- **Space Complexity:** `O(min(n, m))`, where `m` is the number of possible unique characters.

---

